if <exit right> 
	<set background to woods_background> 
	if <exit right> 
		<set background to woods_background> 




while <exit right> # if it's true to this (loop until false) 
	<set background to woods_background> 


Control Flow:
	while loops 

	while <condition>
		<expression>
		<expression> 
	
	<condition> evaluates to a Boolean 

	if <condition> is True, do all the steps inside the while block until it's false 

	n = input("You are in the forest. Go left or right?")

	while n == "right":
		n = input("Your are in the Lost Forest. Go left or right?") 
	print("You got out of the Lost forest") 


n = 0 

while n < 5:
	print(n)
	n = n + 1 # get out of this fucking loop 


for n in range(5):
	print(n)

for <variable> in range

range(start, stop, step) 

default values are start = 0 and step = 1 is an option 

loop until value i stop - 1

mysum = 0 

for i in the range(7, 10):
	mysum += i 

print(mysum) 

for i in the range(5, 11, 2): 
	mysum += i 

print(mysum) 


BREAK Statement 

	immediately exits whatever loop it is in 
	skips remaining expressions in code block
	exits only innermost loop

	while <condition_1>:
		while <condition2>: 
			<expression_a>
			break 
			<expression_b> 
		<expression_c> 



for i in range(5, 11, 2): 
	mysum += i
	if mysum == 5:
		break 

print(mysum) 


For loops   vs while loops 

know number of iterations 		vs 	unbounded number of iterations

can end early via break			vs	can also end early via break 

uses a counter				vs	can use a counter but must initialize before loop and increment it inside loop

can rewrite a for loop using a while loop	vs 	may not be able to rewrite a while loop using a for loop



Use "for LOOPS" when you know there is going to be a computation 

Use "while LOOPS" when there's going to be a condition that you can't predict thats going to allow you to break out of a loop


